trigger:
  branches:
    exclude:
      - '*'

pr:
  - master

resources:
  repositories:
    - repository: crmit
      type: github
      name: dropik/CRMit
      ref: refs/heads/master
      endpoint: dropik

variables:
  - name: projectName
    value: CRMit.Items

stages:
  - stage: test
    displayName: Testing
    jobs:
      - job: unittest
        displayName: Unit Testing
        steps:
          - task: UseDotNet@2
            inputs:
              version: '5.0.x'

          - task: DotNetCoreCLI@2
            displayName: Run tests
            inputs:
              command: 'test'
              arguments: --configuration Debug --logger trx --results-directory $(Agent.TempDirectory)/$(Build.BuildNumber)/TestResults --collect:"XPlat Code Coverage" --settings unittest.runsettings
              publishTestResults: false
              projects: test/$(projectName).UnitTests/$(projectName).UnitTests.csproj

          - task: PublishTestResults@2
            displayName: Publish test results
            inputs:
              testResultsFormat: VSTest
              testResultsFiles: $(Agent.TempDirectory)/$(Build.BuildNumber)/TestResults/*.trx
              failTaskOnFailedTests: true

          - task: PublishCodeCoverageResults@1
            displayName: Publish code coverage report
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(Agent.TempDirectory)/$(Build.BuildNumber)/TestResults/**/coverage.cobertura.xml
  
      - job: integrationtest
        displayName: Integration Testing
        steps:
          - task: UseDotNet@2
            inputs:
              version: '5.0.x'

          - task: DockerCompose@0
            displayName: Up environment
            inputs:
              containerregistrytype: 'Container Registry'
              dockerComposeFile: 'docker-compose.yml'
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'up'
              arguments: '-d'

          - task: DotNetCoreCLI@2
            displayName: Run tests
            inputs:
              command: 'test'
              projects: test/$(projectName).IntegrationTests/$(projectName).IntegrationTests.csproj

          - task: DockerCompose@0
            displayName: Down environment
            inputs:
              containerregistrytype: 'Container Registry'
              dockerComposeFile: 'docker-compose.yml'
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'down'
          
  - stage: build
    displayName: Build
    jobs:
      - job: build
        displayName: Build docker image
        steps:
          - task: Docker@2
            displayName: Login
            inputs:
              containerRegistry: 'Docker Registry'
              command: 'login'
              addPipelineData: false

          - task: Docker@2
            displayName: Build and push staging
            inputs:
              containerRegistry: 'Docker Registry'
              repository: 'dropik/crmit-items'
              command: 'buildAndPush'
              Dockerfile: 'src/CRMit.Items/Dockerfile'
              buildContext: '$(Build.Repository.LocalPath)'
              tags: 'staging'

          - task: Docker@2
            displayName: Logout
            inputs:
              containerRegistry: 'Docker Registry'
              command: 'logout'
              addPipelineData: false

  - stage: e2e
    displayName: Acceptance
    jobs:
      - job: e2e
        displayName: Running E2E tests
        steps:
          - checkout: crmit

          - task: UseDotNet@2
            inputs:
              version: '5.0.x'

          - script: |
              PARENT="localhost"
              openssl req \
              -x509 \
              -newkey rsa:4096 \
              -sha256 \
              -days 365 \
              -nodes \
              -keyout $PARENT.key \
              -out $PARENT.crt \
              -subj "/CN=${PARENT}" \
              -extensions v3_ca \
              -extensions v3_req \
              -config <( \
                echo '[req]'; \
                echo 'default_bits= 4096'; \
                echo 'distinguished_name=req'; \
                echo 'x509_extension = v3_ca'; \
                echo 'req_extensions = v3_req'; \
                echo '[v3_req]'; \
                echo 'basicConstraints = CA:FALSE'; \
                echo 'keyUsage = nonRepudiation, digitalSignature, keyEncipherment'; \
                echo 'subjectAltName = @alt_names'; \
                echo '[ alt_names ]'; \
                echo "DNS.1 = www.${PARENT}"; \
                echo "DNS.2 = ${PARENT}"; \
                echo '[ v3_ca ]'; \
                echo 'subjectKeyIdentifier=hash'; \
                echo 'authorityKeyIdentifier=keyid:always,issuer'; \
                echo 'basicConstraints = critical, CA:TRUE, pathlen:0'; \
                echo 'keyUsage = critical, cRLSign, keyCertSign'; \
                echo 'extendedKeyUsage = serverAuth, clientAuth')
              mkdir -p ${HOME}/.aspnet/https
              cp $PARENT.crt ${HOME}/.aspnet/https/
              cp $PARENT.key ${HOME}/.aspnet/https/
              sudo cp $PARENT.crt /usr/local/share/ca-certificates/
              sudo update-ca-certificates
            displayName: Generate SSL certificate

          - task: DockerCompose@0
            displayName: Up environment
            inputs:
              containerregistrytype: 'Container Registry'
              dockerComposeFile: 'docker-compose.yml'
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'up'
              arguments: '-d'

          - task: DotNetCoreCLI@2
            displayName: Run tests
            inputs:
              command: 'test'
              projects: test/CRMit.E2E/CRMit.E2E.csproj

          - task: DockerCompose@0
            displayName: Down environment
            inputs:
              containerregistrytype: 'Container Registry'
              dockerComposeFile: 'docker-compose.yml'
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'down'